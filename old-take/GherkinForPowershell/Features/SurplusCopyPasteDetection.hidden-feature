Feature: Surplus Copy/Paste Detection
	In order to prevent introducing extra copy/paste into Kernel's code
	As a developer
	I want to detect surplus copy/paste introduced into Kernel's source code

Scenario: Single copy/paste introduced
	Given I have a source file futures.cpp with content
		| Content                                    |
		| shared_ptr<widget> get_widget(int id) {    |
		| static map<int, weak_ptr<widget>> cache;   |
		| static mutex m;                            |
		|                                            |
		| lock_guard<mutex> hold(m);                 |
		| auto sp = cache[id].lock();                |
		| if (!sp) cache[id] = sp = load_widget(id); |
		| return sp;                                 |
		| }                                          |
	When I change the content of futures.cpp liek this
		| Content                                        |
		| shared_ptr<widget> get_widget(int id) {        |
		| static map<int, weak_ptr<widget>> cache;       |
		| static mutex m;                                |
		|                                                |
		| lock_guard<mutex> hold(m);                     |
		| auto sp = cache[id].lock();                    |
		| if (!sp) cache[id] = sp = load_widget(id);     |
		| return sp;                                     |
		| }                                              |
		|                                                |
		| boost::shared_ptr<widget> get_gadget(int id) { |
		| static std::map<int, weak_ptr<widget>> cache;  |
		| static tr1::mutex m;                           |
		|                                                |
		| lock_guard<mutex> hold(m);                     |
		| auto sp = cache[id].lock();                    |
		| if (!sp) cache[id] = sp = load_widget(id);     |
		| return sp;                                     |
		| }                                              |
	Then the following copy/paste should be detected
		| lock_guard<mutex> hold(m);                     |
		| auto sp = cache[id].lock();                    |
		| if (!sp) cache[id] = sp = load_widget(id);     |
		| return sp;                                     |
		| }                                              |

